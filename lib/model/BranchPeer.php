<?php



/**
 * Skeleton subclass for performing query and update operations on the 'branch' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.6 on:
 *
 * Mon Oct 24 09:36:19 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class BranchPeer extends BaseBranchPeer {

  /**
   * @static
   * @param Repository $repository
   * @return void
   */
  public static function synchronize(Repository $repository)
  {
    $branchesGit = GitCommand::getNoMergedBranchesInfos($repository->getValue());

    $branchesModel = BranchQuery::create()
      ->where('Branch.RepositoryId', $repository->getId())
      ->find()
    ;

    foreach ($branchesModel as $branchModel)
    {
      if (!array_key_exists($branchModel->getName(), $branchesGit))
      {
        $branchModel->delete();
      }
      else
      {
        if ($branchModel->getCommitStatusChanged() != $branchesGit[$branchModel->getName()]['commit_status_changed'])
        {
          $branchModel->setStatusId(StatusPeer::A_TRAITER);
          $branchModel->setCommitStatusChanged($branchesGit[$branchModel->getName()]['commit_status_changed']);
          $branchModel->save();
        }
      }

      unset($branchesGit[$branchModel->getName()]);
    }

    foreach ($branchesGit as $name => $branchGit)
    {
      $branch = new Branch();
      $branch->setName($name)
        ->setStatusId(StatusPeer::A_TRAITER)
        ->setRepositoryId($repository->getId())
        ->setCommitReference($branchGit['commit_reference'])
        ->setCommitStatusChanged($branchGit['commit_status_changed'])
        ->setUserStatusChanged(1)
        ->save()
      ;
    }
  }
} // BranchPeer
